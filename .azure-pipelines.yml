strategy:
  matrix:
    linux-stable:
      rustup_toolchain: stable
      image_name: 'ubuntu-16.04'
    linux-beta:
      rustup_toolchain: beta
      image_name: 'ubuntu-16.04'
    windows-stable:
      rustup_toolchain: stable
      image_name: 'windows-latest'
    #windows-beta:
    #  rustup_toolchain: beta
    #  image_name: 'windows-latest'
    #apple-stable:
    #  rustup_toolchain: stable
    #  image_name: 'macos-latest'
    #apple-beta:
    #  rustup_toolchain: beta
    #  image_name: 'macos-latest'

pool:
  vmImage: $(image_name)

steps:
  - script: export CARGO_MAKE_RUN_CODECOV="true" && export CODECOV_TOKEN=$(CODECOV_TOKEN) && export RUSTFLAGS="-C link-dead-code"
    displayName: Set up environment variables
    condition: ne( variables['Agent.OS'], 'Windows_NT' )

  - script: |
      curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain $RUSTUP_TOOLCHAIN
      echo "##vso[task.setvariable variable=PATH;]$PATH:$HOME/.cargo/bin"
    displayName: Install Rust
    condition: ne( variables['Agent.OS'], 'Windows_NT' )

  - script: |
      curl -sSf -o rustup-init.exe https://win.rustup.rs
      rustup-init.exe -y --default-toolchain %RUSTUP_TOOLCHAIN%
      echo "##vso[task.setvariable variable=PATH;]%PATH%;%USERPROFILE%\.cargo\bin"
    displayName: Install Rust
    condition: eq( variables['Agent.OS'], 'Windows_NT' )

  - script: vcpkg install openssl:x64-windows
    displayName: Install OpenSSL
    condition: eq( variables['Agent.OS'], 'Windows_NT' )

  - script: RUSTFLAGS="-C link-dead-code" cargo build
    displayName: Build
    condition: ne( variables['Agent.OS'], 'Windows_NT' )

  - script: cargo build
    displayName: Build
    condition: eq( variables['Agent.OS'], 'Windows_NT' )

  - script: RUSTFLAGS="-C link-dead-code" cargo test
    displayName: Test
    condition: ne( variables['Agent.OS'], 'Windows_NT' )

  - script: cargo test
    displayName: Test
    condition: eq( variables['Agent.OS'], 'Windows_NT' )

    # The following steps are not platform-dependent,
    # so we only have to run them on Linux.

  - script: cargo install --debug cargo-make
    displayName: Install cargo-make
    condition: eq( variables['Agent.OS'], 'Linux' )

  - script: RUSTFLAGS="-C link-dead-code" CODECOV_TOKEN=$(CODECOV_TOKEN) cargo make --no-workspace workspace-coverage
    displayName: Run test coverage
    condition: eq( variables['Agent.OS'], 'Linux' )

  - script: rustup component add rustfmt
    displayName: Install rustfmt
    condition: eq( variables['Agent.OS'], 'Linux' )

  - script: cargo fmt -- --check
    displayName: Verify formatting
    condition: eq( variables['Agent.OS'], 'Linux' )

  - script: rustup component add clippy
    displayName: Install clippy
    condition: eq( variables['Agent.OS'], 'Linux' )

  - script: cargo clippy --all-targets --all-features -- -D warnings
    displayName: Run clippy
    condition: eq( variables['Agent.OS'], 'Linux' )