trigger:
  branches:
    include: ['*']
  tags:
    include: ['*']

jobs:
  - job: 'CI'
    strategy:
      matrix:
        linux-stable:
          rustup_toolchain: stable
          image_name: 'ubuntu-16.04'
        linux-beta:
          rustup_toolchain: beta
          image_name: 'ubuntu-16.04'
        windows-stable:
          rustup_toolchain: stable
          image_name: 'windows-latest'
        #windows-beta:
        #  rustup_toolchain: beta-gnu
        #  image_name: 'windows-latest'
        #apple-stable:
        #  rustup_toolchain: stable
        #  image_name: 'macOS-10.13'
        #apple-beta:
        #  rustup_toolchain: beta
        #  image_name: 'macos-latest'

    pool:
      vmImage: $(image_name)

    steps:
      - script: export CARGO_MAKE_RUN_CODECOV="true" && export CODECOV_TOKEN=$(CODECOV_TOKEN) && export RUSTFLAGS="-C link-dead-code"
        displayName: Set up environment variables
        condition: ne( variables['Agent.OS'], 'Windows_NT' )

      - script: |
          curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain $RUSTUP_TOOLCHAIN
          echo "##vso[task.setvariable variable=PATH;]$PATH:$HOME/.cargo/bin"
        displayName: Install Rust
        condition: ne( variables['Agent.OS'], 'Windows_NT' )

      - script: |
          curl -sSf -o rustup-init.exe https://win.rustup.rs
          rustup-init.exe -y --default-toolchain %RUSTUP_TOOLCHAIN%
          echo "##vso[task.setvariable variable=PATH;]%PATH%;%USERPROFILE%\.cargo\bin"
        displayName: Install Rust
        condition: eq( variables['Agent.OS'], 'Windows_NT' )

      - script: RUSTFLAGS="-C link-dead-code" cargo build
        displayName: Build
        condition: ne( variables['Agent.OS'], 'Windows_NT' )

      - script: cargo build
        displayName: Build
        condition: eq( variables['Agent.OS'], 'Windows_NT' )

      - script: RUSTFLAGS="-C link-dead-code" cargo test
        displayName: Test
        condition: ne( variables['Agent.OS'], 'Windows_NT' )

      - script: cargo test
        displayName: Test
        condition: eq( variables['Agent.OS'], 'Windows_NT' )

        # The following steps are not platform-dependent,
        # so we only have to run them on Linux.

      - script: cargo install --debug cargo-make
        displayName: Install cargo-make
        condition: eq( variables['Agent.OS'], 'Linux' )

      - script: RUSTFLAGS="-C link-dead-code" CODECOV_TOKEN=$(CODECOV_TOKEN) cargo make --no-workspace workspace-coverage
        displayName: Run test coverage
        condition: eq( variables['Agent.OS'], 'Linux' )

      - script: rustup component add rustfmt
        displayName: Install rustfmt
        condition: and( eq( variables['Agent.OS'], 'Linux' ), eq( variables['rustup_toolchain'], 'stable') )

      - script: cargo fmt -- --check
        displayName: Verify formatting
        condition: and( eq( variables['Agent.OS'], 'Linux' ), eq( variables['rustup_toolchain'], 'stable') )

      - script: rustup component add clippy
        displayName: Install clippy
        condition: eq( variables['Agent.OS'], 'Linux' )

      - script: cargo clippy --all-targets -- -D warnings
        displayName: Run clippy
        condition: eq( variables['Agent.OS'], 'Linux' )

  - job: 'Publish'
    condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/')
    strategy:
      matrix:
        linux:
          image_name: 'ubuntu-16.04'
          platform: 'linux'
          rustup_toolchain: 'stable'
        windows:
          image_name: 'windows-latest'
          platform: 'windows'
          rustup_toolchain: 'stable'
        #macos:
        #  image_name: 'macOS-10.13'
        #  platform: 'macos'

    pool:
      vmImage: $(image_name)

    steps:
      - bash: |
          TAG="$(Build.SourceBranch)"
          TAG=${TAG#refs/tags/}
          echo TAG
          echo "##vso[task.setvariable variable=build.tag]$TAG"
        displayName: "Create tag variable"

      - script: |
          curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain $RUSTUP_TOOLCHAIN
          echo "##vso[task.setvariable variable=PATH;]$PATH:$HOME/.cargo/bin"
        condition: ne( variables['Agent.OS'], 'Windows_NT' )
        displayName: Install Rust

      - script: |
          curl -sSf -o rustup-init.exe https://win.rustup.rs
          rustup-init.exe -y --default-toolchain %RUSTUP_TOOLCHAIN%
          echo "##vso[task.setvariable variable=PATH;]%PATH%;%USERPROFILE%\.cargo\bin"
        displayName: Install Rust
        condition: eq( variables['Agent.OS'], 'Windows_NT' )

      - script: cargo build --release
        displayName: Build

      - script: cargo test --release
        displayName: Test

      - task: CopyFiles@2
        displayName: Copy assets
        inputs:
          sourceFolder: '$(Build.SourcesDirectory)/target/release'
          contents: feather-server
          targetFolder: '$(Build.BinariesDirectory)/feather'
        condition: ne( variables['Agent.OS'], 'Windows_NT' )

      - task: CopyFiles@2
        displayName: Copy assets
        inputs:
          sourceFolder: '$(Build.SourcesDirectory)\target\release'
          contents: feather-server.exe
          targetFolder: '$(Build.BinariesDirectory)\feather'
        condition: eq( variables['Agent.OS'], 'Windows_NT' )

      - task: ArchiveFiles@2
        displayName: Gather assets
        inputs:
          rootFolderOrFile: '$(Build.BinariesDirectory)/feather'
          archiveType: 'tar'
          tarCompression: 'gz'
          archiveFile: '$(Build.ArtifactStagingDirectory)/feather-$(build.tag)-$(platform).tar.gz'
        condition: ne( variables['Agent.OS'], 'Windows_NT' )

      - task: ArchiveFiles@2
        displayName: Gather assets
        inputs:
          rootFolderOrFile: '$(Build.BinariesDirectory)\feather\*'
          archiveType: 'zip'
          archiveFile: '$(Build.ArtifactStagingDirectory)\feather-$(build.tag)-$(platform).zip'
        condition: eq( variables['Agent.OS'], 'Windows_NT' )

      - task: GithubRelease@0
        inputs:
          gitHubConnection: 'caelunshun_pat'
          repositoryName: 'caelunshun/feather'
          action: 'edit'
          target: '$(build.sourceVersion)'
          tagSource: 'manual'
          tag: '$(build.tag)'
          assets: '$(Build.ArtifactStagingDirectory)/feather-$(build.tag)-$(platform).tar.gz'
          title: '$(build.tag)'
          assetUploadMode: 'replace'
          addChangeLog: false
        condition: and(succeeded(), ne( variables['Agent.OS'], 'Windows_NT' ))

      - task: GithubRelease@0
        inputs:
          gitHubConnection: 'caelunshun_pat'
          repositoryName: 'caelunshun/feather'
          action: 'edit'
          target: '$(build.sourceVersion)'
          tagSource: 'manual'
          tag: '$(build.tag)'
          assets: '$(Build.ArtifactStagingDirectory)\feather-$(build.tag)-$(platform).zip'
          title: '$(build.tag)'
          assetUploadMode: 'replace'
          addChangeLog: false
        condition: and(succeeded(), eq( variables['Agent.OS'], 'Windows_NT' ))
